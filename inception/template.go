/**
 *  Copyright 2014 Paul Querna
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package ffjsoninception

import (
	"errors"
	"fmt"
	"github.com/pquerna/ffjson/pills"
	"github.com/pquerna/ffjson/shared"
	"io/ioutil"
	"os"
	"text/template"
)

const ffjsonTemplate = `
// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: {{.InputPath}}
// DO NOT EDIT!

package {{.PackageName}}

import (
{{range $k, $v := .OutputImports}}
{{$k}}
{{end}}
)

{{range .OutputFuncs}}
{{.}}
{{end}}

`

func RenderTemplate(ic *Inception) ([]byte, error) {
	var keep = false
	f, err := ioutil.TempFile("", "ffjson-fmt")
	if err != nil {
		return nil, err
	}
	defer func() {
		if !keep {
			os.Remove(f.Name())
		}
	}()

	// TODO(pquerna): re-org this to be cleaner.
	if ic.WriteString {
		imports, funcBody, err := pills.GetPill(pills.Pill_WriteJsonString)
		if err != nil {
			return nil, err
		}

		for _, module := range imports {
			ic.OutputImports[module] = true
		}

		ic.OutputFuncs = append(ic.OutputFuncs, funcBody)
	}

	t := template.Must(template.New("ffjson.go").Parse(ffjsonTemplate))

	err = t.Execute(f, ic)

	if err != nil {
		return nil, err
	}

	out, err := shared.GoFmt(f.Name())
	if err != nil {
		keep = true
		return nil, errors.New(fmt.Sprintf("Error formating: %s\n%v", f.Name(), err))

	}

	return out.Bytes(), nil
}
