/**
 *  Copyright 2014 Paul Querna
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

package generator

import (
	"errors"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"text/template"
)

const inceptionMainTemplate = `
// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// DO NOT EDIT!

package main

import (
	"github.com/pquerna/ffjson/inception"
	"{{.ImportName}}"
)

{{$pn := .PackageName}}

func main() {
	i := ffjsoninception.NewInception()
{{range .StructNames}}
	i.Add({{$pn}}.{{.}}{})
{{end}}
	i.Execute()
}
`

type templateCtx struct {
	StructNames []string
	ImportName  string
	PackageName string
}

type InceptionMain struct {
	inputPath    string
	tempMainPath string
	tempMain     *os.File
}

func NewInceptionMain(inputPath string) *InceptionMain {
	return &InceptionMain{
		inputPath: inputPath,
	}
}

func getImportName(inputPath string) (string, error) {
	p, err := filepath.Abs(inputPath)
	if err != nil {
		return "", err
	}

	dpath := filepath.Dir(p)

	gpath, err := filepath.Abs(os.Getenv("GOPATH"))
	if err != nil {
		return "", err
	}

	rel, err := filepath.Rel(gpath, dpath)
	if err != nil {
		return "", err
	}

	if rel[:4] != "src/" {
		return "", errors.New(fmt.Sprintf("Could not find source directory: GOPATH=%q REL=%q", gpath, rel))
	}
	return rel[4:], nil
}

func (im *InceptionMain) Generate(packageName string, si []*StructInfo) error {
	var err error

	importName, err := getImportName(im.inputPath)

	if err != nil {
		return nil
	}

	im.tempMain, err = ioutil.TempFile("", "ffjson-inception")
	if err != nil {
		return err
	}

	sn := make([]string, 0)
	for _, st := range si {
		sn = append(sn, st.Name)
	}

	tc := &templateCtx{
		ImportName:  importName,
		PackageName: packageName,
		StructNames: sn,
	}

	t := template.Must(template.New("inception.go").Parse(inceptionMainTemplate))
	err = t.Execute(im.tempMain, tc)
	if err != nil {
		return err
	}

	println(im.tempMain.Name())

	return nil
}

func (im *InceptionMain) Run(outputPath string) error {
	return nil
}
